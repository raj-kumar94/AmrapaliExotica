/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package amrapali_exotica;


import java.awt.CardLayout;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import javax.swing.JTextField;


/**
 *
 * @author raj
 */
public class Amrapali2 extends javax.swing.JFrame {

    JButton b=new JButton();
    Connection con =null;
    ResultSet rs = null;
    Statement st= null;
    PreparedStatement pst= null;
    ResultSetMetaData rsmd=null;
    private ImageIcon format = null;
    String filename = null;
    int s=0;
    byte[] person_image = null;
    String firstColumnID=null;

    
        //table properties
   // String[] colName= new String[6];
    ArrayList<String> colNames;
    //String values[]= new String[6];
    ArrayList<String> values=null;
    //JTextField[] tf = new JTextField[6];
    ArrayList<JTextField> tf;
    ArrayList<JLabel> label;
    String tableName= null;
    
    public Amrapali2() {
        initComponents();
        
        try {
            //Class.forName("org.sqlite.JDBC");
            //con = DriverManager.getConnection("jdbc:sqlite:C:\\Users\\raj\\amrapali.db");
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/amrapali", "root", "rajkumar");
            
            DatabaseMetaData md = con.getMetaData();   //inserting table names in JComboBox
            rs = md.getTables(null, null, "%", new String[]{"TABLE"});
            uploadImageGuards.setVisible(false);
            jDesktopPane1.setVisible(false);
            
            //adding textFields to array list
            tf = new ArrayList<JTextField>();
            tf.add(tf1);
            tf.add(tf2);
            tf.add(tf3);
            tf.add(tf4);
            tf.add(tf5);
            tf.add(tf6);
            tf.add(tf7);
            
            //adding labels to array list
            label = new ArrayList<JLabel>();
            label.add(l1);
            label.add(l2);
            label.add(l3);
            label.add(l4);
            label.add(l5);
            label.add(l6);
            label.add(l7);
            
            
            setInvisible();

        }
        catch(Exception e){}
         
    }
    
    public void setInvisible()
    {
        //step2
 
            for(int j=0;j<tf.size();j++)
            {
                tf.get(j).setVisible(false);
                label.get(j).setVisible(false);
            }
    }
    
    public void setEverything()
    {
       // values = new ArrayList<String>();
           setInvisible();
        int valueSize = colNames.size();
        System.out.println(valueSize);
        for(int i=0;i<valueSize;i++)
        {
            //making labels and text fields visible
            tf.get(i).setVisible(true);
            label.get(i).setVisible(true);
            label.get(i).setText(colNames.get(i));
            tf.get(i).setText("");

        }
    }
    

    private void update_table(String tableName) throws Exception
    {    

            String sql ="select * from "+tableName+"";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            tables.setModel(DbUtils.resultSetToTableModel(rs));
            
            if(tableName.equals("guards"))
            {   uploadImageGuards.setVisible(true);
            jDesktopPane1.setVisible(true);
            }
            else{
                uploadImageGuards.setVisible(false);
                jDesktopPane1.setVisible(false);
            }
    } 
    
    public String columnName(int i)
     {
         String colName="";
         String sql1= "select * from "+tableName+"";
        try
        {
         pst = con.prepareStatement(sql1);
        rs = pst.executeQuery();
        rsmd = rs.getMetaData();
         colName= rsmd.getColumnName(i);
        }
        catch(Exception e){}
        return colName;
     }
    

/* This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        bGuards = new javax.swing.JButton();
        bComplaints = new javax.swing.JButton();
        bMaintanance = new javax.swing.JButton();
        bElectricity = new javax.swing.JButton();
        bThingsNeeded = new javax.swing.JButton();
        bThings_already_have = new javax.swing.JButton();
        bMaintanance_area = new javax.swing.JButton();
        bHouses = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tables = new javax.swing.JTable();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        imageArea = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        uploadImageGuards = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        l1 = new javax.swing.JLabel();
        tf1 = new javax.swing.JTextField();
        l2 = new javax.swing.JLabel();
        tf2 = new javax.swing.JTextField();
        tf3 = new javax.swing.JTextField();
        l3 = new javax.swing.JLabel();
        l4 = new javax.swing.JLabel();
        tf4 = new javax.swing.JTextField();
        l5 = new javax.swing.JLabel();
        tf5 = new javax.swing.JTextField();
        l6 = new javax.swing.JLabel();
        tf6 = new javax.swing.JTextField();
        tf7 = new javax.swing.JTextField();
        l7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        bSave = new javax.swing.JButton();
        bUpdate = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        bClear = new javax.swing.JButton();
        bCQuery = new javax.swing.JButton();
        tfQuery = new javax.swing.JTextField();
        cQuery = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jToolBar1.setRollover(true);

        bGuards.setText("Gaurds");
        bGuards.setFocusable(false);
        bGuards.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bGuards.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bGuards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardsActionPerformed(evt);
            }
        });
        jToolBar1.add(bGuards);

        bComplaints.setText("Complaints");
        bComplaints.setFocusable(false);
        bComplaints.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bComplaints.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bComplaints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bComplaintsActionPerformed(evt);
            }
        });
        jToolBar1.add(bComplaints);

        bMaintanance.setText("Maintanance");
        bMaintanance.setFocusable(false);
        bMaintanance.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bMaintanance.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bMaintanance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMaintananceActionPerformed(evt);
            }
        });
        jToolBar1.add(bMaintanance);

        bElectricity.setText("Electricity");
        bElectricity.setFocusable(false);
        bElectricity.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bElectricity.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bElectricity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bElectricityActionPerformed(evt);
            }
        });
        jToolBar1.add(bElectricity);
        bElectricity.getAccessibleContext().setAccessibleName("electricity");

        bThingsNeeded.setText("ThingsNeeded");
        bThingsNeeded.setFocusable(false);
        bThingsNeeded.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bThingsNeeded.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bThingsNeeded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bThingsNeededActionPerformed(evt);
            }
        });
        jToolBar1.add(bThingsNeeded);

        bThings_already_have.setText("Things_already_have");
        bThings_already_have.setFocusable(false);
        bThings_already_have.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bThings_already_have.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bThings_already_have.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bThings_already_haveActionPerformed(evt);
            }
        });
        jToolBar1.add(bThings_already_have);

        bMaintanance_area.setText("Maintanance_area");
        bMaintanance_area.setFocusable(false);
        bMaintanance_area.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bMaintanance_area.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bMaintanance_area.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMaintanance_areaActionPerformed(evt);
            }
        });
        jToolBar1.add(bMaintanance_area);

        bHouses.setText("Houses");
        bHouses.setFocusable(false);
        bHouses.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bHouses.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bHouses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHousesActionPerformed(evt);
            }
        });
        jToolBar1.add(bHouses);

        jLabel1.setText("Search");

        tables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tables);

        imageArea.setText("jLabel2");

        jDesktopPane1.setLayer(imageArea, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageArea, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jButton9.setText("Print");

        uploadImageGuards.setText("Upload Image");
        uploadImageGuards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadImageGuardsActionPerformed(evt);
            }
        });

        l1.setText("jLabel8");

        tf1.setPreferredSize(new java.awt.Dimension(160, 20));

        l2.setText("jLabel8");

        l3.setText("jLabel8");

        l4.setText("jLabel8");

        l5.setText("jLabel8");

        l6.setText("jLabel8");

        l7.setText("jLabel8");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(l2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf2, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(l3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf3, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(l4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf4, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(l5, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf5, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(l6, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf6, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(l7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf7, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Commands", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(153, 0, 0))); // NOI18N
        jPanel2.setLayout(new java.awt.GridLayout(2, 2));

        bSave.setText("Save");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });
        jPanel2.add(bSave);

        bUpdate.setText("Update");
        bUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpdateActionPerformed(evt);
            }
        });
        jPanel2.add(bUpdate);

        bDelete.setText("Delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });
        jPanel2.add(bDelete);

        bClear.setText("Clear");
        bClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClearActionPerformed(evt);
            }
        });
        jPanel2.add(bClear);

        bCQuery.setText("Custom Query");
        bCQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCQueryActionPerformed(evt);
            }
        });

        cQuery.setText("query");
        cQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cQueryActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tfQuery)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDesktopPane1)
                            .addComponent(uploadImageGuards, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(bCQuery, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cQuery)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(tfQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(cQuery))
                    .addComponent(jTextField1))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(uploadImageGuards)
                        .addGap(18, 18, 18)
                        .addComponent(jButton9)
                        .addGap(18, 18, 18)
                        .addComponent(bCQuery)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 11, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bGuardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardsActionPerformed
        tableName= "guards";
        colNames= new ArrayList<String>();
        colNames.add("id");
        colNames.add("name");
        colNames.add("age");
        colNames.add("salary");
        colNames.add("reporting_time");
        colNames.add("checkout_time");
        colNames.add("joining_date");

        setEverything();
        
        try {
            update_table("guards");
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }

        try
        {
            String sql = "select image from guards where id="+firstColumnID+"";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            
            if(rs.next())
            {
                byte[] imageData = rs.getBytes("image");
                format = new ImageIcon(imageData);
                imageArea.setIcon(format);                
            }  
        }catch(Exception e){}

    }//GEN-LAST:event_bGuardsActionPerformed

    private void bComplaintsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bComplaintsActionPerformed
       tableName= "Resident_Complaints";
       colNames= new ArrayList<String>();
       colNames.add("S_No"); 
       colNames.add("flat_no");
        colNames.add("name");
        colNames.add("Complaint");
        colNames.add("Complaint_date");
        colNames.add("solved_or_not");

       setEverything();
       
       try {
            update_table("Resident_Complaints");
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bComplaintsActionPerformed

    private void uploadImageGuardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadImageGuardsActionPerformed
       JFileChooser chooser = new JFileChooser();
       chooser.showOpenDialog(null);
       File f= chooser.getSelectedFile();
       filename = f.getAbsolutePath();
       
       try
       {
           File image = new File(filename);
           FileInputStream fis = new FileInputStream(image);
           ByteArrayOutputStream bos = new ByteArrayOutputStream();
           byte[] buf = new byte[1024];
           
           for(int readNum;(readNum=fis.read(buf))!=-1;)
           {
               bos.write(buf,0,readNum);
           }
           person_image= bos.toByteArray();   //now save this to database
           
           String sql = "update guards set image =? where id="+firstColumnID+"";
           pst = con.prepareStatement(sql);
           pst.setBytes(1,person_image);
           pst.execute();
           JOptionPane.showMessageDialog(null,"image saved!");
           
       } catch(Exception e){}
    }//GEN-LAST:event_uploadImageGuardsActionPerformed

    private void tablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablesMouseClicked
        int row = tables.getSelectedRow();
        firstColumnID = (tables.getModel().getValueAt(row,0).toString());
        String colName=columnName(1);
       // tf.get(i).setText(values.get(i));
        //pst = con.prepareStatement(sql);
       // rs = pst.executeQuery();
        System.out.println(firstColumnID);
        values = new ArrayList<String>();
        if(values.size()>0)
           {
               System.out.println("clearing values");
               values.clear(); //neccessary to update TFs
           }
        
        try {
            String sql = "select * from "+tableName+" where "+colName+"=?";
           // String sql = "select * from "+tableName+" where "+colName+"="+firstColumnID+"";
            System.out.println(sql);
            pst = con.prepareStatement(sql);
            pst.setString(1,firstColumnID);
            rs = pst.executeQuery();

           
        if(rs.next())
        {
          
            if(tableName.equals("guards"))
                {

                  //  System.out.println("colNames size: "+colNames.size());
                    for(int p=0;p<colNames.size();p++)
                    {
                       // values.set(p, rs.getString(p));
                        values.add(rs.getString(p+1));
                      //  System.out.println(values.get(p));
                        tf.get(p).setText(values.get(p));
                    }

                       if(rs.getBytes("image")!=null)
                       {
                            byte[] imageData = rs.getBytes("image");
                            format = new ImageIcon(imageData);
                            imageArea.setIcon(format);
                       }
                      update_table(tableName); 
                }
            else if(tableName.equals("Resident_Complaints"))
                {
                 //values.clear();  //neccessary to update TFs
                    for(int p=0;p<colNames.size();p++)
                    {
                       // values.set(p, rs.getString(p));
                        values.add(rs.getString(p+1));
                        tf.get(p).setText(values.get(p));
                    }
                    update_table(tableName);
                }
            else if(tableName.equals("maintanance"))
                {
                    values.clear();  //neccessary to update TFs
                    for(int p=0;p<colNames.size();p++)
                    {
                       // values.set(p, rs.getString(p));
                        values.add(rs.getString(p+1));
                        tf.get(p).setText(values.get(p));
                    }
                }
            else if(tableName.equals("elect_bill"))
            {
                values.clear();  //neccessary to update TFs
                    for(int p=0;p<colNames.size();p++)
                    {
                       // values.set(p, rs.getString(p));
                        values.add(rs.getString(p+1));
                        tf.get(p).setText(values.get(p));
                    }
            }
            else if(tableName.equals("things_needed"))
            {
               values.clear();  //neccessary to update TFs
                    for(int p=0;p<colNames.size();p++)
                    {
                       // values.set(p, rs.getString(p));
                        values.add(rs.getString(p+1));
                        tf.get(p).setText(values.get(p));
                    }
            }
            else if(tableName.equals("things_already_have"))
            {
                values.clear();  //neccessary to update TFs
                    for(int p=0;p<colNames.size();p++)
                    {
                       // values.set(p, rs.getString(p));
                        values.add(rs.getString(p+1));
                        tf.get(p).setText(values.get(p));
                    }
            }
            else if(tableName.equals("maintanance_area"))
            {
                values.clear();  //neccessary to update TFs
                    for(int p=0;p<colNames.size();p++)
                    {
                       // values.set(p, rs.getString(p));
                        values.add(rs.getString(p+1));
                        tf.get(p).setText(values.get(p));
                    }
            }
            else if(tableName.equals("houses"))
            {
                    values.clear();  //neccessary to update TFs
                    for(int p=0;p<colNames.size();p++)
                    {
                       // values.set(p, rs.getString(p));
                        values.add(rs.getString(p+1));
                        tf.get(p).setText(values.get(p));
                    }
            }
            
        }   
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tablesMouseClicked

    private void bMaintananceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMaintananceActionPerformed
        tableName= "maintanance";
        colNames= new ArrayList<String>();
        colNames.add("S_No");
        colNames.add("flat_no");
        colNames.add("bill_maintanance");
        colNames.add("paid_or_not");

        setEverything();
        
        try {
            update_table("maintanance");
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bMaintananceActionPerformed

    private void bElectricityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bElectricityActionPerformed
            tableName= "elect_bill";
            colNames= new ArrayList<String>();
            colNames.add("S_No"); 
            colNames.add("flat_no");
            colNames.add("bill_amount");
            colNames.add("paid_or_not");
            setEverything();
        
       try {
            update_table("elect_bill");
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }
        

    }//GEN-LAST:event_bElectricityActionPerformed

    private void bThingsNeededActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bThingsNeededActionPerformed
        tableName= "things_needed";
        colNames= new ArrayList<String>();
        colNames.add("S_No");
        colNames.add("things_needed");
        setEverything();
        try {
            update_table("things_needed");
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bThingsNeededActionPerformed

    private void bThings_already_haveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bThings_already_haveActionPerformed
        tableName= "things_already_have";
        colNames= new ArrayList<String>();
        colNames.add("S_No");
        colNames.add("things_already_have");
        setEverything();
        
        try {
            update_table("things_already_have");
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bThings_already_haveActionPerformed

    private void bMaintanance_areaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMaintanance_areaActionPerformed
       tableName= "maintanance_area";
       colNames= new ArrayList<String>();
       colNames.add("S_No"); 
       colNames.add("name_of_area");
       setEverything();
       
       try {
            update_table("maintanance_area");
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bMaintanance_areaActionPerformed

    private void bHousesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHousesActionPerformed
        tableName= "houses";
        colNames= new ArrayList<String>();
        colNames.add("S_No");
        colNames.add("flat_no");
        colNames.add("Occupied");
        setEverything();
        try {
            update_table("houses");
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bHousesActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
       try {
            String[] col_names = new String[colNames.size()];
            colNames.toArray(col_names);
            //again get the values here because we want to update values from text fields too
            if(values.size()>0)
                values.clear();
           // update_table(tableName);
            for(int i=0;i<colNames.size();i++)
            {
                values.add(tf.get(i).getText());
            }
            
            String[] col_values = new String[colNames.size()];
            values.toArray(col_values);
           
            System.out.println("size is: "+col_names.length);
            for(int i=0;i<colNames.size();i++)
            {
                System.out.println(col_names[i]);
                System.out.println(col_values[i]);
            }
            
            String sql=SaveButton2.insertQuery(tableName, col_names,col_values);
            pst = con.prepareStatement(sql);
            System.out.println(sql);
            pst.execute();
            update_table(tableName);
            JOptionPane.showMessageDialog(null, "saved");
            
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Duplicate "+colNames.get(0)+"!");
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bSaveActionPerformed

    private void bClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClearActionPerformed
        for(int x=0;x<colNames.size();x++)
            tf.get(x).setText("");
    }//GEN-LAST:event_bClearActionPerformed

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        String sql= "delete from "+tableName+" where "+colNames.get(0)+"=?";
        System.out.println("delete sql: "+sql);
        try {
            pst = con.prepareStatement(sql);
            pst.setString(1, values.get(0));
            System.out.println(sql);
            pst.execute();
            update_table(tableName);
            JOptionPane.showMessageDialog(null, "deleted!");
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_bDeleteActionPerformed

    private void bCQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCQueryActionPerformed
        DatabaseMetaData md;
        try {
            md = con.getMetaData();
            CustomQuery cq = new CustomQuery();
            cq.setValues(md,rs,con);
            cq.setVisible(true);
            
            if(rs.next())
                System.out.println("there isdda");
            rs = pst.executeQuery();
            tables.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_bCQueryActionPerformed

    private void cQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cQueryActionPerformed
       String sql= tfQuery.getText();
        try {
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            tables.setModel(DbUtils.resultSetToTableModel(rs));
            setInvisible();
        } catch (SQLException ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }
       
       
    }//GEN-LAST:event_cQueryActionPerformed

    private void bUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUpdateActionPerformed
            
            if(values.size()>0)
                values.clear();
           // update_table(tableName);
            for(int i=0;i<colNames.size();i++)
            {
                values.add(tf.get(i).getText());
            }
            String sql="update "+tableName+" set "+colNames.get(1)+"='"+values.get(1)+"'";
            for(int i=2;i<colNames.size();i++)
                {
                    sql=sql+", "+colNames.get(i)+"='"+values.get(i)+"'";
                }
            sql=sql+" where "+colNames.get(0)+"="+values.get(0)+"";
            System.out.println(sql);
            
            try {
                pst = con.prepareStatement(sql);
                pst.execute();
                update_table(tableName);
                JOptionPane.showMessageDialog(null, "updated!");
                update_table(tableName);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "something is wrong !");
        }
            
    }//GEN-LAST:event_bUpdateActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            rs.close();
            pst.close();
            con.close();
            System.out.println("connection closed :)");
        } catch (SQLException ex) {
            Logger.getLogger(Amrapali2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed

    public void setCustomQueryResultSet(ResultSet rs)
    {
        this.rs=rs;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Amrapali2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Amrapali2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Amrapali2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Amrapali2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Amrapali2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCQuery;
    private javax.swing.JButton bClear;
    private javax.swing.JButton bComplaints;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bElectricity;
    private javax.swing.JButton bGuards;
    private javax.swing.JButton bHouses;
    private javax.swing.JButton bMaintanance;
    private javax.swing.JButton bMaintanance_area;
    private javax.swing.JButton bSave;
    private javax.swing.JButton bThingsNeeded;
    private javax.swing.JButton bThings_already_have;
    private javax.swing.JButton bUpdate;
    private javax.swing.JButton cQuery;
    private javax.swing.JLabel imageArea;
    private javax.swing.JButton jButton9;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel l1;
    private javax.swing.JLabel l2;
    private javax.swing.JLabel l3;
    private javax.swing.JLabel l4;
    private javax.swing.JLabel l5;
    private javax.swing.JLabel l6;
    private javax.swing.JLabel l7;
    private javax.swing.JTable tables;
    private javax.swing.JTextField tf1;
    private javax.swing.JTextField tf2;
    private javax.swing.JTextField tf3;
    private javax.swing.JTextField tf4;
    private javax.swing.JTextField tf5;
    private javax.swing.JTextField tf6;
    private javax.swing.JTextField tf7;
    private javax.swing.JTextField tfQuery;
    private javax.swing.JButton uploadImageGuards;
    // End of variables declaration//GEN-END:variables
}
